# -*- coding: utf-8 -*-
"""sudhir.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3TqropeiiiO-IyEWvXiSRE3qr_NT_eJ

GRIP - The Sparks Foundation
Data Science and Business Analytics Internship

Linear Regression with Python Scikit Learn - Prediction using Supervised Machine Leaning

Author: makwana sudhir

Task-1: Predict the percentage of an student based on the no. of study hours

In this regression task we will predict the percentage of marks that a student is expected to score based upon the no. of hours they studied
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
print("Libraries successfully imported")

data = 'http://bit.ly/w-data'
df = pd.read_csv(data)
print("Data successfully imported")

df.head()

df.tail()

# Checking for missing values
df.isnull().sum()

df.describe()

df.info()

df.corr()

"""Data Visualisation
Visualizing using line plot
"""

plt.style.use('ggplot')
df.plot(kind = 'line',figsize=(10,8))
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.grid(b= True, color='k', linestyle='-', linewidth=1)
plt.legend(loc =1)
plt.show()

"""Visualizing using area plot"""

xmin = min(df.Hours)
xmax = max(df.Hours)
df.plot(kind = 'area', alpha = 1, stacked = True, figsize = (10,5), xlim=(xmin,xmax))
plt.title('Hours vs Percentage', size = 15)
plt.xlabel('Hours Studied', size = 15)
plt.ylabel('Percentage Score', size = 15)
plt.grid(b= True, color='k', linestyle='-', linewidth=1)
plt.legend(loc =1)
plt.show()

"""Visualizing using area plot"""

df.plot(kind = 'scatter', x = 'Hours', y = 'Scores', color = 'g',figsize = (10,5))
plt.title('Hours vs Percentage', size = 15)
plt.xlabel('Hours Studied', size = 15)
plt.ylabel('Percentage Score', size = 15)
plt.grid(b= True, color='k', linestyle='-', linewidth=1)
plt.show()

"""By visualization we came to know that this problem can be solved by linear regression

Data Splitting
"""

from sklearn.model_selection import train_test_split
X = df.iloc[:, :-1].values  
y = df.iloc[:, 1].values  
X_train, X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=51)

"""ML Model Training"""

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

lr.fit(X_train,y_train)
print("Training Completed")

print('Coefficients: ', lr.coef_)
print('Intercept: ', lr.intercept_)

# We can also plot the fit line over the data in single linear regression
df.plot(kind = 'scatter', x = 'Hours', y = 'Scores', color = 'g',figsize = (10,5))
plt.plot(X_train,lr.coef_[0]*X_train + lr.intercept_, color = 'r')
plt.title('Hours vs Percentage', size = 15)
plt.xlabel('Hours Studied', size = 15)
plt.ylabel('Percentage Score', size = 15)
plt.grid(b= True, color='k', linestyle='-', linewidth=1)
plt.show()

"""Red line is the best fit line for this data

Evaluation of the Model:
"""

# Using metrics to find mean absolute error and r2 to see the accuracy

from sklearn import metrics
from sklearn.metrics import r2_score

y_pred = lr.predict(X_test)
print('Mean absolute error : {}'.format(metrics.mean_absolute_error(y_pred,y_test)))
print('R2-Score: %.2f' % r2_score(y_pred,y_test))

"""Comparing actual vs predicted"""

y_pred

y_test

df1 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df1

"""Predicting the score with single input value

"""

hours = 8.5
predicted_score = lr.predict([[hours]])

print('No. of hours= ', hours)
print('Predicted Score= ',predicted_score[0])